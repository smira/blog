<html><body><p>Кого мы хотим подготовить, обучая студентов программированию на C++? Что они должны вынести из курса? Мне кажется, важно научить писать программы. Красивые, эффективные, сопровождаемые. Язык - лишь инструмент программирования. И надо научиться пользоваться инструментом. Вот когда в автошколе учат вождению машину, совсем не обязательно знать тонкости устройства шины CAN, обеспечивающей связь всех устройств автомобиля. Да, надо узнать, что такое тормоза, руль, двигатель, но на каких-то деталях надо остановиться, и, самое, главное, надо научиться пользоваться автомобилем (то есть водить автомобиль) безопасно, уверенно и т.п. 


А почему мы заставляем студентов знать подробности языка, которые нельзя продемонстрировать на разумном примере? Например, множественное наследование (я уже молчу о виртуальном наследование в сочетании с множественном). Для этого нужны примеры, большие примеры, огромное количество понятий (например, интерфейсы), чтобы студент почувствовал, что и зачем. А мы с упорством сумасшедших рассказываем о том, какие члены классов будут видны или не видны в той или иной ситуации.



Вот объясните мне, кто-нибудь использовал перегрузку наряду с виртуальностью?


    class A
    {
    public:
        virtual int f();
    };
    class B : public A
    {
    public:
        virtual int f(double);
    };


Что это нормально, это работает? Зачем нужны эти знания? А кто перегружал функции, расположенные в разных областях видимости?


    class A
    {
        void f(char);
    public:
        void f(int);
    };

    A a;
    a.f('a');


Ну кто такое делает в реальных задачах? Зачем студентов заставлять разбирать эти примеры?



Как я понял из <a href="http://http://www.ddj.com/cpp/207000124?pgno=3">интервью Бьерна Страуструпа</a>, это проблема преподавания Computer Science не только на факультете ВМиК МГУ. Он говорит, кого мы готовим? <em>lanugage lawyers</em>? По-моему, это очень точно английское словосочетание... Мы готовим студентов стать членами комитета ISO по стандартизации C++?



Они еще не поняли до конца, зачем нужны конструкторы, как написать надежные классы, они не узнают в рамках курса ничего про юнит-тесты, например, зато приведенные выше примеры будут щелкать как орешки.



Кому это нужно? Самоудовлетворение от задалбливания в умы студентов бесполезных знаний?



Почему мы не экзаменуем их на умение программировать? Ну или хотя бы на знание базовых конструкций языка? Зачем такие извращенные примеры?

Если бы я опубликовал весь вариант работы, которую писали студенты, думаю, многие были бы в шоке. Я уверяю, что подавляющее большинство потрясающих, талантливых C++-программистов не смогут решить этот вариант на "пять". Но от этого они не становятся хуже, а претензии надо предъявлять тем, кто составил такую программу курса, предъявляет такие требования к студентам. Как они могут полюбить такой предмет?



По-моему, пора остановиться и сменить ориентиры.</p></body></html>