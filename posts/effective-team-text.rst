.. link: 
.. description: 
.. tags: ritconf,nastachku,draft
.. date: 2013/05/01 22:29:49
.. title: Эффективная команда (расшифровка доклада)
.. slug: effective-team-text

Видео и слайды доклада доступны в `предыдущем посте </posts/effective-team.html>`_. Здесь текст выступления, 
достаточно близкий к тому, что я рассказывал.

Введение
--------

Пару слов о себе: я проработал бОльшую часть времени в российских компаниях от маленького до среднего размера, занимаясь
как разработкой своих продуктов, так и разработкой на заказ. Четыре года назад я пришел в небольшой (на тот момент) 
американский стартап `Qik <http://qik.com/>`_, который вырос и прошел через два поглощения подряд: `Skype <http://skype.com/>`_ 
купил Qik, а `Microsoft <http://microsoft.com>`_ купил Skype.

.. image:: /galleries/effective-team/effective-team-pres.002.jpg
    :class: presentation
    :width: 50%
    :alt: День закончился, а у меня ощущение, что по сути я ничего не сделал... Наша команда увеличилась в два раза, а мы успеваем сделать меньше

Для меня этот доклад начался с вопросов, которые я сам себе задавал долгое время:

* День закончился, а у меня ощущение, что по сути я ничего не сделал...
* Наша команда увеличилась в два раза, а мы успеваем сделать меньше...

Они возникали у меня в разных командах, на разных этапах развития проекта и мне каждый раз хотелось понять в чем причина
моей неудовлетворенности, почему я чувствую свою работу и работу своей команды *неэффективной*?

.. TEASER_END

Под эффективностью здесь я понимаю определение, которое дает 
`Википедия <http://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D1%81%D1%82%D1%8C_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B>`_:

    Эффективность системы — это свойство системы выполнять поставленную цель в заданных условиях использования и с определенным качеством.

Я предполагаю, что качество зафиксировано (мы ведь все хотим создавать качественные продукты!), а вопрос состоит только в том,
какой *ценой* будет создан продукт. Здесь я имею в виду не столько финансовый вопрос, а, скорее, затраченные ресурсы: время,
нервы, огорчения и радости, упущенная выгода и т.п.

Конечно, частью ответа на вопрос о том, что мы успеваем делать меньше, чем мы могли сделать раньше, является "раньше деревья были
выше, а трава зеленее". Мы всегда относимся к тому, что делаем сейчас, в большей степени критически, чем к своим прошлым достижениям
или к тому, что делают конкуренты. Из-за этого возникает постоянное неудовольствие своими результатами.

Но разве не можем мы изменить что-то, чтобы сделать работу команды более эффективной? Как сделать так, чтобы проект двигался вперед
быстрее? Я попробую ответить на эти вопросы.

Микрокоманды
------------

Чтобы разобраться с причинами неэффективности, необходимо рассмотреть сначала эффективные идеальные команды.

.. image:: /galleries/effective-team/effective-team-pres.003.jpg
    :class: presentation
    :width: 50%
    :alt: Идеальная команда

**Один разработчик** - это, несомненно, еще не *команда*. Но это экстремальный случай, с которого было бы удобно
начать рассмотрение вопроса эффективности. Думаю, почти каждый разработчик проходил через такой этап в самом начале
своей карьеры: ребенок, школьник или студент, делающий первые шаги в разработке. Я считаю, что это идеальный с точки
зрения эффективности случай:

* я разрабатываю то, что хочу;
* мне нет необходимости с кем-то встречаться, пытаться найти общий язык;
* быстрая обратная связь: я сделал изменение, оценил результат, исправил, двинулся вперед;
* нет проблемы человеческих отношений;
* я выбираю те инструменты и платформы, которые мне интересны, я развиваюсь.

Точно также на "нулевом" этапе развития проекта создатель может работать в одиночку: это может быть разработка 
прототипа, изучение различных вариантов архитектуры, технологические эксперименты. При этом этот единственный человек
сочетает в себе огромное количество навыков и профессиональных качеств, экономя на взаимодействии с другими 
сотрудниками.

.. image:: /galleries/effective-team/effective-team-pres.005.jpg
    :class: presentation
    :width: 50%
    :alt: Заказчик + разработчик

Следующей по размеру командой является команда из двух человек: чаще всего это человек бизнеса и разработчик, технический человек. Это может быть фрилансер и заказчик или два основателя стартапа: один отвечающий за бизнес и второй, отвечающий за техническую сторону. Я бы назвал такой вид успешного сотрудничества *симбиозом*: двое людей делают вместе то, что ни один из них не мог бы сделать в одиночку.

Команда из двух человек все так же эффективна:

* "одна голова хорошо, а две лучше";
* если двум членам команды комфортно друг с другом в человеческом плане, нет необходимости в формальных встречах,
  сложных обсуждениях;
* один человек редко может заниматься одновременно развитием продукта и технической составляющей, а в данной ситуации
  каждый дополняет другого;
* с технической стороны разработчик также свободен в выборе инструментов и платформ, как и человек, отвечающий за бизнес,
  свободен в выборе направления развития.

.. image:: /galleries/effective-team/effective-team-pres.006.jpg
    :class: presentation
    :width: 50%
    :alt: Роли CEO, CTO

Скорее всего со временем эти два "человека-оркестра" раздадут часть своих полномочий другим сотрудникам, оставив себе должности генерального
и технического директоров. Одновременно новая, большая по размеру компания будет менее эффективной, чем изначальный союз двух человек.

Зачем нужна команда?
--------------------

И все-таки, команды больше чем одного-двух разработчиков существуют повсеместно. Значит, существуют преимущества у большой команды?

.. image:: /galleries/effective-team/effective-team-pres.008.jpg
    :class: presentation
    :width: 50%
    :alt: Bus Factor

Самый яркий аргумент за создание большой команды - это `Bus Factor <http://ru.wikipedia.org/wiki/Bus_factor>`_. Bus Factor - это то количество членов команды, которые можно безопасно посадить в один автобус: если автобус попадет в ДТП и эти члены команды погибнут, то проект не погибнет, у оставшихся членов команды хватит знаний и навыков, чтобы успешно его продолжить.
Совершенно не обязательно, чтобы событие было фатальным - в более широком смысле это может быть декрет, отпуск, увольнение, болезнь, травма, и т.п. Таким образом, bus factor является мерой равномерного распространения знаний внутри команды.

При этом размер команды сам по  не решает проблему bus factor - если в команде только один человек обладает знаниями о какой-то части проекта, bus factor так и остается равным единице.

Можно привести еще классический пример ошибки управления: было две команды, у одной был руководителем Вася, у другой Петя. Вася был очень
сильным разработчиком, он делал самые сложные задачи сам, исправлял проблемы, следил за работой каждого. Петя же не был так силен и старался
помочь раскрыть свои способности членам своей команды. Васина команда была на голову выше Петиной. Однако все изменилось, когда Вася и Петя
пошли на повышение: Васина команда сразу скатилась в самый низ, так как без него они не могли уже показывать такие хорошие результаты,
а Петина команда продолжила работать как и раньше, потихоньку увеличивая свой уровень. Как вы думаете, кто прав, Петя или Вася? Какой
bus factor у этих команд?

.. image:: /galleries/effective-team/effective-team-pres.009.jpg
    :class: presentation
    :width: 50%
    :alt: Обмен знаниями

Следующим несомненным преимуществом команды является обмен знаниями. Каждый человек обладает уникальным опытом, талантами, которые
в команде могут быть раскрыты полностью. Любые формы неформальных, спонтанных технических обсуждений в здоровой команде приводит
к появлению новых идей, рассмотрению проблемы с разных сторон, анализу решений. После таких обсуждений команда чувствует принятое
решение "своим", а не навязанным сверху, не принятым единолично. При этом с моей точки зрения самая большая проблема микрокоманд, с которых мы начали вопрос рассмотрения эффективности - это отсутствие обмена знаниями, которое необходимо компенсировать каким-то другим образом (конференции, meetup, coworking, и т.п.)

При этом необходимо отметить, что иногда обмен знаниями становится асимметричным: более слабые члены команды пытаются агрессивно
получить знания и опыт более сильных членов команды, что вносит ненужное напряжение в команду и ложится дополнительной нагрузкой
на сильных членов команды, и так перегруженных основной работой. Решением этой проблемы является создание более равномерных по уровню знаний команд.

.. image:: /galleries/effective-team/effective-team-pres.010.jpg
    :class: presentation
    :width: 50%
    :alt: Собрать профессионалов из разных областей

Еще одна возможность, которая предоставляет команда - это расширение возможностей и кругозора команды за счет привлечения специалистов
из разных областей. Это могут быть серверные и клиентские разработчики, системные администраторы и специалисты по тестированию,
сетевые эксперты и специалисты по транскодированию аудио-видео потоков.

Есть тонкая грань между "коллекцией профессионалов"" и "командой из разносторонних профессионалов". Команда не просто включает в себя
разносторонних специалистов, а они работают вместе, как единое целое, так, что в продукте, выпускаемом командой уже невозможно различить
вклад отдельного человека.  Можно привести аналогию из мира парфюмерии: отдельные эссенции ноток запаха сами по себе совершенны, но духи образуют смешение их в определенных пропорциях, и в готовых духах вклад каждого ингридиента уже неразличим.

.. image:: /galleries/effective-team/effective-team-pres.011.jpg
    :class: presentation
    :width: 50%
    :alt: Сглаживание ритма работы

С точки зрения предсказуемости сроков выпуска продукта, возможности постоянного сопровождения уже выпущенного продукта команда гораздо
лучше: за счет большого количества членов сглаживаются отдельные флуктуации, связанные с отпусками, болезнью и изменением состава команды.
Команда существует как единое целое, обеспечивая передачу знаний новым членам команды, таким образом сумма знаний и навыков команды не ухудшается со временем.

.. image:: /galleries/effective-team/effective-team-pres.012.jpg
    :class: presentation
    :width: 50%
    :alt: Надо делать больше!

Увеличение размера команды ради увеличения эффективности - это одна из основных ловушек процесса разработки. Что еще более удивительно,
в эту ловушку попадает команда вместе со своим лидером. Когда лидер оказывается под давлением начальства, команда не успевает в срок выполнить задачи (срок чаще всего не согласованный с командой), лидер перенести давление обратно на начальство и ему необходимо потребовать что-то, что потребует участия руководства и дополнительных расходов. Самый простой вариант - попросить нанять еще разработчиков. Все звучит очень логично, но поможет ли это команде? Сделает ли это ее более эффективной? Совершенно точно не поможет в краткосрочной перспективе, увеличение размера команды приведет к значительному снижению производительности. В долгосрочной перспективе такое изменение может быть положительным, но только если удастся держать размер в разумных пределах (3-5 человек), разделяя большие команды на маленькие (что требует соответствующего разделения продукта на компоненты).

Одновременно здесь необходимо отметить, что сроки сдачи проекта часто переносятся вперед, то, что было нужно вчера "срочно", уже не нужно сегодня, а уже увеличившуюся команду, которая не отвечает текущим потребностям, трудно сократить - это требует увольнения людей, что всегда болезненно.

Проблемы команд
---------------

.. image:: /galleries/effective-team/effective-team-pres.014.jpg
    :class: presentation
    :width: 50%
    :alt: Увеличение продуктивности? Больше встреч, чем работы?

Происходит ли увеличение продуктивности команды по мере ее роста? Получается ли работать эффективнее, если растет число команд? Наверное, нет. Чаще всего это приводит к увеличению числа встреч, которые негативно сказываются на эффективности сотрудников. Кроме того, что встречи
просто отнимают время, они вносят прерывание в рабочее время, еще больше снижая эффективность. Полезность самих встреч часто является сомнительной, при этом полностью отказаться от них оказывается тяжело, потому что они являются единственным способом синхронизации команды (или команд). При этом увеличение количество участников встречи (которое естественно происходит при разрастании команды) не позволяет ни сократить продолжительность встречи, ни сделать ее более продуктивной.

.. image:: /galleries/effective-team/effective-team-pres.015.jpg
    :class: presentation
    :width: 50%
    :alt: Контроль! Divide et impera! Разделяй и властвуй!

Увеличение размера команды позволяет руководству легче играть в "разделяй и властвуй": несомненно, любая политика не может улучшить атмосферу коллектива, но маленькую сплоченную команду сложнее разделить на группы, играя на противоречиях. Любой раскол в команде, отсутствие четкого направления развития мгновенно ухудшает эффективность, так как разработчики теряют единственную возможную мотивацию - ощущение, что они создают продукт, который будет полезен конечным пользователям. Также противоречия могут разделять отдельные команды, создавая ложную конкуренцию между командами, создание дублирующих подразделений, которые соревнуются за возможность выполнить работу, пытаясь доказать необходимость своего существования.

В большой, бездумно (слишком быстро) нанятой команде существует угроза появление "подлизы", конформиста, который будет пытаться уловить текущие потребности менеджмента, вместо того, чтобы отстаивать позицию всей команды.

Можно вспомнить то, что большинство людей в мире можно разделить на две большие категории: умные, но резкие в общении, и недалекие, но очень милые и дружелюбные. Был проведен опрос среди руководства компаний, кого вы бы хотели видеть в своей компании? Ответ был однозначно: "умных", ну а с тяжелым характером всегда можно что-то сделать, можно сгладить противоречия. Однако если провести анализ тех людей, которые действительно работают в компании, оказывается что большую часть составляют люди не очень умные, но зато дружелюбные и удобные в общении.

.. image:: /galleries/effective-team/effective-team-pres.016.jpg
    :class: presentation
    :width: 50%
    :alt: Команда склонна к росту

Как мы уже обсуждали, при росте команды ее общая эффективность начинает падать при достижении некоторого критического размера (3-5 человек), при этом также падает и эффективность каждого отдельного члена команды. Как было отставание от сроков, так и осталось. Можно пытаться найти любую внешнюю причину, сложнее всего признать неэффективность команды. Однако одним из "выходов" является дальнейшее увеличение численности команды, которое, само собой, уменьшить эффективность еще больше. Таким образом, происходит дальнейшее разрастание команды, заводящее ситуацию в тупик.

В качестве еще одного примера можно привести составление плана по найму новых сотрудников на достаточно длительный срок (полгода-год). В результате лидер команды, не имея четкого представления об объеме и сложности задач на такой длительный период времени, пытается перестраховаться и заносит в план по найму нескольких новых сотрудников. Отдел найма, который получил утвержденный план, будет изо всех сил стараться его выполнить, так как выполнение плана является их критерием эффективности, и теперь команде придется вырасти

.. image:: /galleries/effective-team/effective-team-pres.017.jpg
    :class: presentation
    :width: 50%
    :alt: Увеличение числа связей

С ростом команды число связей между людьми растет как квадрат от количества людей в команде. Каждая такая связь требует времени: надо поздороваться, перекинуться парой слов, уговорить использовать что-то и т.п. Здесь самым важным является то, что число связей растет *значительно* быстрее роста самой команды, естественным образом ограничивая размер эффективной команды. С моей точки зрения это 3-5 человек.

.. image:: /galleries/effective-team/effective-team-pres.018.jpg
    :class: presentation
    :width: 50%
    :alt: Человеческие отношения

Не стоит скрывать и то, что человеческие отношения - это самое сложное в любом коллективе. В команде, которая работает постоянно вместе, члены команды много общаются друг с другом, результаты работы каждого видны, в команде, где легко неудачным комментарием задеть лучшие чувства инженера, - отношения между людьми играют очень большую роль. Вопрос установления отношений, подбора людей в команду, которые бы подходили друг другу, появление культуры команды и ее поддержание по мере роста команды - вот далеко не полный перечень вопросов, связанных с отношениями между людьми, которые необходимо решать.

Забота о налаживании и поддержании отношений в команде чаще всего ложится на плечи лидера. Например, ему придется скорее всего столкнуться с наличием в группе `аутсайдера (или козла отпущения) <http://www.psychologos.ru/articles/view/autsayder>`_, а также других устойчивых ролей, которые могут разрушить коллектив. В команде всегда будут разногласия по нерабочим вопросам: 

* можно ли использовать мат?
* "жаворонки" vs. "совы"
* тон разговора: кто-то говорит резко, а для другого это может быть обидно
* аудитория разговора: можно ли высказывать негативное мнение о чужой работе так, что это услышит вся команда

Эти разногласия необходимо решать так, чтобы минимизировать число конфликтов внутри команды. Опять-таки, с ростом команды таких проблем будет только больше, а эффективности от них не будет.

.. image:: /galleries/effective-team/effective-team-pres.019.jpg
    :class: presentation
    :width: 50%
    :alt: Кастовая структура

Уровень знаний инженеров в команде может оказаться очень неоднородным: это могут быть как формальные названия должностей, наподобие "младший разработчик", так и объективная разница в уровне подготовки, которая может быть вызвана слишком быстрым ростом команды. В любом варианте, может возникнут ситуация "дедовщины": разработчики, считающие себя *"старшими"*, отказываются выполнять работу, которая им кажется неинтересной для их уровня. *"Младшие"* разработчики получают лишь доступ к рутинным заданиям, которые не способствуют их развитию. Такое развитие событий крайне нежелательно и не ведет к здоровым отношениям в команде. Возможна ситуация, при которой "старшие" начинают выполнять работу "спустя рукава", не давая "младшим" выдвигать идея и замечания по поводу их работы.

Гораздо большей эффективности команда может достигнуть при отсутствии каких-либо кастовых разделений: более опытные разработчики либо сами, либо в паре с другими членами команды, либо на этапе review участвуют в создании самых сложных или ответственных частей системы, обеспечивая корректность основной архитектуры. Инженеры с меньшим уровнем знаний растут, выполняя более сложные задачи, участвуя в парном программировании. Конечно, чтобы это было возможно, уровень команды должен быть более-менее однородной. Если сотрудники низкой квалификации рассматриваются как способ выполнения совсем простой, рутинной работы, такую работу лучше автоматизировать силами "старших" разработчиков.

Как остановить рост команды?
----------------------------

И все-таки, если большая команда - это огромное количество проблем, а команда нам все-таки необходима, как соблюсти баланс размера команды? Как сделать так, чтобы команда оставалась *эффективной*?

.. image:: /galleries/effective-team/effective-team-pres.021.jpg
    :class: presentation
    :width: 50%
    :alt: Автоматизация не дает команде расти

**Автоматизация** позволяет не только не нанимать большое количество людей для решения рутинных задач, но и кардинально **улучшает качество** выполняемых работ, исключая из работы "человеческий фактор". Более того, процесс автоматизации связан с созданием *инструмента*, который является внутренним продуктом, то есть вслед за разработкой сразу происходит применение продукта, возникает обратная связь и мотивация полезности: "то, что я делаю, является полезным другим людям". Такая мотивация повышает эффективность работы, делает задачу автоматизации увлекательной. Желательно, чтобы автоматизацией не занималась специальная команда, т.к. отсутствие связи с реальным клиентом внешнего продукта компании также демотивирует ("я все время делал только внутренние сервисы").

Примеры хорошей автоматизации:

* Chef/Puppet вместо ручной настройки каждого сервера (автоматизация труда системных администраторов);
* Capistrano и подобные системы разворачивания проекта (вместо ручных действий при каждом deploy);
* облако вместо работы с "железными" серверами;
* ORM вместо ручного создания таблиц/хранимых процедур (конечно, это применимо не всегда);
* и т.п.

Конечно, всякая автоматизация требует усилий, но обычно эффект от нее превышает все ожидания и позволяет не только удержать команду от бессмысленного роста, но и повысить качество продукта. Всегда при появлении большого объема рутинной, неинтересной работы есть выбор между наймом большой команды низкооплачиваемых людей и автоматизацией, лучше выбрать автоматизацию. Даже для не вполне поддающихся автоматизации процессов, таких как модерация контента, даже частичная автоматизация может существенно снизить объем ручного труда, а нетривиальная задача модерации может стать хорошим мотиватором для разработчиков.

В качестве отрицательного примера можно привести компанию, которая использовала Cacti для мониторинга очень большого парка серверов и приложений. Видимо, все начиналось достаточно незаметно: новые элементы и графики добавлялись в мониторинг вручную. Потом количество проверок и графиков росло, была нанята команда студентов, которая обновляла конфигурацию Cacti 40 часов в неделю. Самое плохое в этой истории то, что качество мониторинга было плохим: то график отсутствовал, то был перепутан с другим. В результате проблемы в запущенных приложениях были обнаружены слишком поздно, а пользователи наблюдали задержки при работе с продуктом. Любая попытка автоматизации сразу натыкалась на стену из огромного массива существующих данных, внесенных вручную в немного разном виде, разными людьми, с разной, не всегда уже сегодня понятной целью.

.. image:: /galleries/effective-team/effective-team-pres.022.jpg
    :class: presentation
    :width: 50%
    :alt: Качество не дает команде расти

Часто **к росту команды приводит** не столько большой объем новой функциональности, которую необходимо разработать, а **бесконечный шлейф из багов** и других проблем качества, тянущийся за командой и все увеличивающийся со временем. Если команда не уделяет вопросам качества должное внимание с самого первого дня работы над продуктом, если критерий качества не определен или определен неверно и не контролируется каждый день на протяжении всего процесса разработки и эксплуатации, рано или поздно такую команду накрывают ковровым бомбометанием баги, проблемы масштабирования, надежности и т.п. Один баг, будучи исправленным, вскрывает или вносит еще 2-3, объем работ по исправлению бага может превышать весь объем работы по разработке новой функциональности и т.п.

Команда производит некачественный продукт, при этом это обнаруживаются уже после того, как продукты был выпущен. Менеджмент компании находится в состоянии истеричной попытки сделать что-то, чтобы исправить положение. Команда, до выпуска продукта находившаяся в убеждении, что они делают хороший продукт, вдруг понимает что это не так, впадает в депрессию. Команда либо пытается перетянуть одеяло вины за провал на внешние факторы: другие команды, процессы, болезни, климат, либо принимает на себя вину за провал в качестве, обещает все исправить в ближайшее время. При этом ключевых выводов о причинах такого низкого качества не делается, вместо этого вводится процесс оценивания багов по приоритетам, метрики количества обнаруженных/исправленных багов, исправлению багов отводится фиксированный процент времени разработки. Команда боится вносить какую-либо серьезные изменения в код, так как это может привести к еще большему количеству багов. Без больших изменений исправить ситуацию не удается, мотивация внутри команды страдает ("мы только и делаем, что исправляем баги"), в то же время в силу повышенного внимания к команде со стороны руководства они ощущают себя "избранными мучениками", страдающими "за дело". Все это не приводит к эффективной работе, а значит менеджмент принимает единственно верное с их точки зрения решение: команду надо увеличить, что приводит, конечно же, к еще большим проблемам.

Совершенно другая картина наблюдается в команде, которая **заботится о качестве с первого дня**. Если критерий качества выбран верно и соблюдается на протяжении процесса разработки, сюрприза в виде неожиданного количества багов ожидать не стоит. Появляющиеся баги исправляются по мере появления, при этом критерий качества изменяется таким образом, чтобы исключить появление подобных багов в дальнейшем. Команда работает предсказуемо, выпуская новые версии продукта в соответствие со сроками, клиенты довольны качеством продукта. Команда мотивирована, не склонна к бессмысленному росту.

Что это за **критерий качества**, который позволяет добиться столь замечательных результатов? Этот критерий должна выбрать сама команда, основываясь на общепринятых подходах и специфике своей предметной области. Желательно, чтобы проверка критерия качества была максимально автоматизирована, тогда удастся производить его измерение можно было бы производить как можно чаще, желательно, чтобы каждый разработчик мог до фиксации изменений в системе контроля версий убедиться в том, что его изменения не ухудшают качество.

Самые общие компоненты критерия качества:

* continuous integration как способ автоматизировать контроль качества;
* unit-testing как способ проверки алгоритмических и других базовых участков кода;
* системное тестирование как способ проверки компонента в целом;
* интеграционное тестирование для анализа взаимодействия компонентов и тестирования продукта в целом;
* ручное тестирование;
* анализ покрытия кода каждым из способов тестирования;
* проверка стиля кода;
* статический анализ кода с целью выявления уязвимостей, ошибок и т.п.;
* динамический анализ, например, корректности блокировок в многопоточных программах;
* профилирование, microbenchmarks, контроль использования памяти;
* нагрузочное тестирование;
* слепое тестирование на предмет поиска уязвимостей;
* постоянное интеграционное тестирование в боевом окружении с целью быстрого выявления отказов;
* тестирование с имитацией отказов;
* анализ всех необработанных исключений;
* наличие нескольких окружений для тестирования изменений;
* автоматизированный мониторинг с большим количестве различных проверок, эшелонированная защита с целью раннего выявления сбоев.

Какие критерии выбрать? Самый важный критерий - это работоспособность продукта в целом, то есть интеграционное тестирование. Но оно невозможно без того, чтобы каждый компонент работал отдельно, поэтому это системное тестирование, а затем следуют все остальные критерии качества, перечисленные выше.

История из жизни: команда разрабатывает серверную систему, состоящую из большого количества компонентов. Каждый разработчик по сути занимается своим компонентом (здесь кроется проблема!). Система разрабатывается долго, в течение 2 лет, после бурных обсуждений архитектуры. Я разговариваю с одним из разработчиком, он с гордостью рассказывает о своем компоненте, показывает тест, который демонстрирует, что этот компонент свободно перемалывает сетевой трафик на скорости 20 Гбит/с. Через какое-то время команда предпринимает попытку собрать все компоненты воедино, но оказывается, что все вместе они нормально не работают. То есть эти 20 Гбит/с в одном из компонентов системы ничего не говорят ни о работоспособности, ни о производительности системы в целом. Просто критерий качества был неверным: никто не пытался с первого дня разработки запускать интеграционный тест. Эта же проблема определяла такой долгий срок разработки относительно простой системы.

.. image:: /galleries/effective-team/effective-team-pres.023.jpg
    :class: presentation
    :width: 50%
    :alt: Кросс-функциональность

Что происходит снаружи команды?
-------------------------------


